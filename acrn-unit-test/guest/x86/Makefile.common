#This is a make file with common rules for both x86 & x86-64

all: directories test_cases

cflatobjs += lib/pci.o
cflatobjs += lib/pci-edu.o
cflatobjs += lib/alloc.o
cflatobjs += lib/vmalloc.o
cflatobjs += lib/alloc_page.o
cflatobjs += lib/alloc_phys.o
cflatobjs += lib/x86/setup.o
cflatobjs += lib/x86/io.o
cflatobjs += lib/x86/smp.o
cflatobjs += lib/x86/vm.o
cflatobjs += lib/x86/fwcfg.o
cflatobjs += lib/x86/apic.o
cflatobjs += lib/x86/atomic.o
cflatobjs += lib/x86/desc.o
cflatobjs += lib/x86/isr.o
cflatobjs += lib/x86/acpi.o
cflatobjs += lib/x86/stack.o
cflatobjs += lib/x86/fault_test.o
cflatobjs += lib/x86/delay.o
cflatobjs += lib/x86/misc.o
cflatobjs += lib/x86/register_op.o
cflatobjs += lib/x86/memory_type.o
cflatobjs += x86/instruction_common.o

OBJDIRS += lib/x86

$(libcflat): LDFLAGS += -nostdlib
$(libcflat): CFLAGS += -ffreestanding -I $(SRCDIR)/lib -I lib

COMMON_CFLAGS += -m$(bits)
COMMON_CFLAGS += -O1

# stack.o relies on frame pointers.
KEEP_FRAME_POINTER := y

V8086_DIR := $(TEST_DIR)/v8086

libgcc := $(shell $(CC) -m$(bits) --print-libgcc-file-name)

# We want to keep intermediate file: %.elf and %.o
.PRECIOUS: %.elf %.raw %.o $(TEST_DIR)/%_prelink.o $(TEST_DIR)/realmode/%.elf $(TEST_DIR)/realmode/%.o \
	$(V8086_DIR)/%.elf

FLATLIBS = lib/libcflat.a $(libgcc)
modifylds:
	$(SRCDIR)/scripts/modify_lds.sh $(START_A)

%.elf: modifylds %_prelink.o $(FLATLIBS) $(SRCDIR)/x86/flat.lds $(cstart.o)
ifneq ($(FILE_NAME), hsi_16_64_cpumode)
	$(CC) $(CFLAGS) -nostdlib -o $@ -Wl,-T,$(SRCDIR)/x86/flat.lds \
		$(filter %.o, $^) $(FLATLIBS)
else
	$(CC) $(CFLAGS) -nostdlib -o $@ -Wl,-T,$(SRCDIR)/x86/flat_hsi.lds \
		$(filter %.o, $^) $(FLATLIBS)
endif
	@chmod a-x $@

%.flat: %.elf
	$(OBJCOPY) -O elf32-i386 $^ $@
	@chmod a-x $@

%.raw: %.elf
	$(OBJCOPY) -O binary $^ $@.tmp
	dd if=/dev/zero of=$@ bs=1 count=$(shell echo $$((0x`readelf -S $< | grep "\.text" | grep -E -o "[0-9a-f]{$$(($(bits)/4))}"` - $(ENTRY_OFFSET))))
	dd if=$@.tmp of=$@ conv=notrunc oflag=append
	@rm $@.tmp
	@chmod a-x $@

x86/bzimage_stub.raw: x86/bzimage_stub.o
	@$(OBJCOPY) -O binary $^ $@

%.bzimage: %.raw x86/bzimage_stub.raw
	@scripts/mk_bzimage.py $+ $@ $(ENTRY_OFFSET)

tests-common = $(TEST_DIR)/vmexit.flat $(TEST_DIR)/tsc.flat \
               $(TEST_DIR)/smptest.flat  $(TEST_DIR)/port80.flat \
               $(TEST_DIR)/realmode.flat $(TEST_DIR)/msr.flat \
               $(TEST_DIR)/hypercall.flat $(TEST_DIR)/sieve.flat \
               $(TEST_DIR)/kvmclock_test.flat  $(TEST_DIR)/eventinj.flat \
               $(TEST_DIR)/s3.flat $(TEST_DIR)/pmu.flat $(TEST_DIR)/setjmp.flat \
               $(TEST_DIR)/tsc_adjust.flat $(TEST_DIR)/asyncpf.flat \
               $(TEST_DIR)/init.flat $(TEST_DIR)/smap.flat \
               $(TEST_DIR)/hyperv_synic.flat $(TEST_DIR)/hyperv_stimer.flat \
               $(TEST_DIR)/hyperv_connections.flat \
               $(TEST_DIR)/umip.flat

ifdef API
tests-api = api/api-sample api/dirty-log api/dirty-log-perf

OBJDIRS += api
endif

test-flat-bin += $(tests-common)
test-flat-bin += $(tests)
test-raw-bin += $(tests-common:.flat=.raw)
test-raw-bin += $(tests:.flat=.raw)
raw: $(test-raw-bin) $(tests-api)
flat: $(test-flat-bin) $(test-api)
test_cases: $(test-flat-bin) $(test-raw-bin) $(tests-api)

unstitched-test-cases += $(TEST_DIR)/realmode.flat
unstitched-test-cases += $(tests-realmode)
stitched-test-cases = $(filter-out $(unstitched-test-cases),$(tests-common) $(tests))
case_table.o = $(TEST_DIR)/case_table.o
stitched.o = $(TEST_DIR)/stitched.o

$(case_table.o:.o=.c):
	scripts/mkcasetable.sh $@ $(patsubst $(TEST_DIR)/%.flat,%,$(stitched-test-cases))

$(TEST_DIR)/stitched.elf: modifylds $(stitched-test-cases:.flat=_prelink.o) $(FLATLIBS) $(SRCDIR)/x86/flat.lds $(cstart.o) $(case_table.o) $(stitched.o)
	@rm -rf  $(cstart.o)
	$(CC) $(CFLAGS) -c -nostdlib -o $(cstart.o) $(cstart.o:.o=.S)
	$(CC) $(CFLAGS) -nostdlib -o $@ -Wl,-T,$(SRCDIR)/x86/flat.lds \
		$(filter %.o, $^) $(FLATLIBS)
	@chmod a-x $@

$(TEST_DIR)/%_prelink.o: $(TEST_DIR)/%.o
	$(LD) -m$(ldarch) -r -o $@ $^
	@$(OBJCOPY) \
		--keep-global-symbol=main \
		--keep-global-symbol=ap_main \
		--keep-global-symbol=save_unchanged_reg \
		--add-symbol main_$*=.text:0x`nm $@ | grep "T main" | egrep -o "[0-9a-f]{16}"`,function,global \
		--weaken-symbol=main \
		$@

$(TEST_DIR)/%.o: CFLAGS += -std=gnu99 -ffreestanding -I $(SRCDIR)/lib -I $(SRCDIR)/lib/x86 -I lib

ifeq ($(REAL_MODE), yes)
CFLAGS += -DREAL_MODE
endif

ifneq ($(PHASE_N), )
CFLAGS += -D$(PHASE_N)
endif

ifeq ($(V8086), v8086_mode)
CFLAGS += -DV8086_CODE
v8086_objs := $(V8086_DIR)/main.o
v8086_objs += $(V8086_DIR)/common.o
v8086_objs += $(V8086_DIR)/$(V8086_MAIN).o
v8086_objs += $(V8086_DIR)/v8086_lib.o
v8086_objs += $(V8086_DIR)/v8086_cstart.o

$(V8086_DIR)/%.elf: $(v8086_objs)
	$(CC) $(CFLAGS) -nostdlib -o $@ -Wl,-T,$(V8086_DIR)/v8086_flat.lds $^
	@chmod a-x $@
endif

$(TEST_DIR)/realmode.raw: ENTRY_OFFSET = 0x4000
$(TEST_DIR)/realmode.elf: $(TEST_DIR)/realmode.o
	$(CC) $(CFLAGS) -m32 -nostdlib -o $@ -Wl,-T,$(SRCDIR)/$(TEST_DIR)/realmode.lds $^

$(TEST_DIR)/realmode.o: bits = 32

$(TEST_DIR)/kvmclock_test_prelink.o: $(TEST_DIR)/kvmclock.o

$(TEST_DIR)/hyperv_synic_prelink.o: $(TEST_DIR)/hyperv.o

$(TEST_DIR)/hyperv_stimer_prelink.o: $(TEST_DIR)/hyperv.o

$(TEST_DIR)/hyperv_connections_prelink.o: $(TEST_DIR)/hyperv.o

$(TEST_DIR)/vmx_prelink.o: $(TEST_DIR)/vmx.o

$(TEST_DIR)/realmode/%.raw: ENTRY_OFFSET = 0x4000
$(TEST_DIR)/realmode/%.bzimage: ENTRY_OFFSET = 0x4000
$(TEST_DIR)/realmode/%.elf: $(TEST_DIR)/realmode/rmode_cstart.o $(TEST_DIR)/realmode/rmode_entry.o $(TEST_DIR)/realmode/apic.o \
	$(TEST_DIR)/realmode/setjmp16.o \
	$(TEST_DIR)/realmode/%.o $(TEST_DIR)/realmode/rmode_flat.lds
	$(CC) $(CFLAGS) -nostdlib -o $@ -Wl,-T,$(SRCDIR)/x86/realmode/rmode_flat.lds \
		 $(filter %.o, $^)
	@chmod a-x $@

$(TEST_DIR)/realmode/rmode_cstart.o: $(TEST_DIR)/realmode/rmode_cstart.S
	$(CC) $(CFLAGS) -c -nostdlib -o $@ $<

include $(TEST_DIR)/Makefile.acrn

arch_clean:
	$(RM) $(TEST_DIR)/*.o $(TEST_DIR)/*.flat $(TEST_DIR)/*.elf $(TEST_DIR)/*.raw \
	$(TEST_DIR)/.*.d lib/x86/.*.d \
	$(tests-api) api/*.o api/*.a api/.*.d \
	$(case_table.o:.o=.c) $(TEST_DIR)/*/*.d $(TEST_DIR)/realmode/*.o $(TEST_DIR)/realmode/*.elf \
	$(V8086_DIR)/.*.d $(V8086_DIR)/*.elf $(V8086_DIR)/*.raw $(V8086_DIR)/*.o

api/%.o: CXXFLAGS += -m32 -std=gnu++11

api/%: LDLIBS += -lstdc++ -lpthread -lrt
api/%: LDFLAGS += -m32

api/libapi.a: api/kvmxx.o api/identity.o api/exception.o api/memmap.o
	$(AR) rcs $@ $^

$(tests-api) : % : %.o api/libapi.a
